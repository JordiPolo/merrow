#!/usr/bin/env ruby
$:.unshift(File.dirname(__FILE__) + '/../lib') unless $:.include?(File.dirname(__FILE__) + '/../lib')

require 'octokit'
require 'merrow'


configuration = Configuration.new

client = Octokit::Client.new(access_token: configuration.access_token)


def format(text, indent)
  (" " * indent) + text
end

def days_ago(date)
  days = ((Time.now - date) / 60 / 60 / 24).to_i
  if days == 0
    'today:'
  elsif days == 1
    'yesterday:'
  else
    "#{days} days ago:"
  end.ljust(13)
end

def print_pull_requests(pull_requests)
  indent = 2
  pull_requests.each do |pr|
    days_ago = days_ago(pr[:updated_at])
    puts format("#{days_ago} #{pr[:title]} ", indent)
    puts format(pr[:html_url], days_ago.size + indent + 1)
    puts format(pr[:user][:login], days_ago.size + indent + 1 )
  end
  puts ""
end

def get_pull_requests(client, repo)
  client.pull_requests(repo)
rescue Octokit::NotFound
  puts "The repository #{repo} could not be found."
  []
end

puts "Checking PRs in your repos"

configuration.repos.each do |repo|
  pull_requests = get_pull_requests(client, repo)
  if !pull_requests.empty?
    puts "On #{repo}:"
    print_pull_requests(pull_requests)
  end
end



